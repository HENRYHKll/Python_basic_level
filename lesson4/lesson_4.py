
#2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего
# элемента.
#Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
#Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
#Результат: [12, 44, 4, 10, 78, 123].

def list_current(list):
    for i in range(1, len(list)):
        if list[i] > list[i - 1]:
            yield list[i]

list_src = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
list_done = [el_1 for el_1 in list_current(list_src)]
print(list_done)

#3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
#Подсказка: использовать функцию range() и генератор.
print([el_2 for el_2 in range(20, 241) if el_2 % 20 == 0 or el_2 % 21 == 0])

#4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел,
# соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания
# обязательно использовать генератор.
#Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
#Результат: [23, 1, 3, 10, 4, 11]


def numders_2(list_2):
    numders_i = {el_3: list_2.count(el_3) for el_3 in list_2}
    for el_3 in list_2:
        if numders_i[el_3] == 1:
            yield el_3

list_src_2 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print([el_3 for el_3 in numders_2(list_src_2)])

#5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные
# числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
#Подсказка: использовать функцию reduce().

import operator
from functools import reduce
print(reduce(operator.__mul__, [numders_3 for numders_3 in range(100, 1001) if numders_3 % 2 == 0]))
#что то как то так но чего то нехвотает

#6. Реализовать два небольших скрипта:
#а) итератор, генерирующий целые числа, начиная с указанного,
#б) итератор, повторяющий элементы некоторого списка, определенного заранее.
#Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен
# быть бесконечным. Необходимо предусмотреть условие его завершения.
#Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также
# необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

from itertools import count, cycle
print(f'Итератор, генерирующий целые числа, начиная с указанного')
generation_start = int(input(f'Укажите диапазон с: '))
generation_end = int(input(f'Укажите диапазон до: '))

generation_i = count(generation_start)

for i in range(generation_start, generation_end + 1):
    print(next(generation_i))


cycler = cycle([25, 16, 111, 505, 11])
generation_status = None
print('========== Итератор, повторяющий элементы некоторого списка, определенного заранее ==========')
print('Нажмите q, чтобы остановиться или любую другую кнопку, чтобы продолжить')
while generation_status != 'q':
    print(next(cycler), end='')
    generation_status  = input()


#7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции
# должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает
# за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
#Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
def fact(n):
    number_i_1 = 1
    for i_7 in range(1, n + 1):
        number_i_1 *= i
        yield number_i_1


for el_4 in fact(4):
    print(el_4)
